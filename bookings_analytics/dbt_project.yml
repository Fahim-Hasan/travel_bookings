
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'bookings_analytics'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'bookings_analytics'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  bookings_analytics:
    # Config indicated by + and applies to all files under models/example/
    staging:
      +schema: staging # <-- loads models into this schema, (Need to rethink this)
      +materialized: view

    intermediate:
      +schema: intermediate          # All int models into 'intermediate' schema
      +materialized: view            # For memory + reusability

    marts:
      +schema: marts                 # All marts into 'marts' schema
      +materialized: table           # or incremental for large models, for now we use table

      core:
        +materialized: table         # Ensure core star schema tables are tables
        facts:
          +materialized: incremental # For large fact tables, use incremental
        dimensions:
          +materialized: table       # Dimensions can remain table
        bridges:
          +materialized: view       # Bridges typically as tables

      reports:
        +materialized: view          # Reporting models can remain views unless optimization required

    utilities:
      +schema: utilities          # All int models into 'intermediate' schema
      +materialized: table            # For memory + reusability

seeds:
  bookings_analytics:
    schema: raw # <-- loads seeds into this schema
    quote_columns: false
    header: true
